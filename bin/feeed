#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const { CronJob } = require('cron');
const render = require('../lib/render');
const crawl = require('../lib/crawl');
const validate = require('../lib/validate');
const { getExist, write } = require('../lib/save');

async function run(target, dir) {
  const exist = getExist(target.id, dir);
  const items = await crawl(target);
  const newItems = items.filter(item => !exist.map[item.id]);
  if (newItems.length === 0) return;

  const xml = render({
    ...target,
    items: newItems.concat(exist.items).slice(0, target.limit || 20),
  });
  write(target.id, xml, dir);
}

program
  .version('0.1.0')
  .option('-c, --config [file]', 'set config file', './sites.js')
  .option('-d, --dir [dir]', 'set target dir', './rss')
  .parse(process.argv);

const config = path.resolve(process.cwd(), program.config);
const targets = require(config); // eslint-disable-line

const valid = validate(targets);
if (!valid) {
  const messages = validate.errors.map(error => `  ${error.message}`).join('\n');
  console.error('Config syntax error:');
  console.error(messages);
  process.exit();
}

targets.forEach((target) => {
  const { cron } = target;
  const cronTime = typeof cron === 'string' ? cron : cron.time;
  const cronTimezone = typeof cron === 'string' ? undefined : cron.timezone;
  run(target, program.dir);
  return new CronJob(cronTime, () => run(target, program.dir), null, true, cronTimezone);
});
